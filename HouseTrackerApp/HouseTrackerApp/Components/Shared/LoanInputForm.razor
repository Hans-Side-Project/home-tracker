@using HouseTrackerApp.Models
@using HouseTrackerApp.Services
@using HouseTrackerApp.Components.Shared
@inject IValidationService ValidationService

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-calculator me-2"></i>房貸條件設定
        </h5>
    </div>
    <div class="card-body">
        <EditForm Model="@LoanInput" OnValidSubmit="@HandleValidSubmit">

            <!-- 基本房屋資訊 -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <IconInput Label="房屋總價"
                              IconClass="bi bi-house"
                              @bind-Value="@HousePriceText"
                              InputType="text"
                              Placeholder="請輸入房屋總價"
                              IsRequired="true"
                              HelpText="新台幣元，支援千分位逗號"
                              ErrorMessage="@GetErrorMessage(nameof(LoanInput.HousePrice))"
                              WarningMessage="@GetWarningMessage(nameof(LoanInput.HousePrice))"
                              InfoMessage="@GetInfoMessage(nameof(LoanInput.HousePrice))" />
                </div>
                <div class="col-md-6">
                    <IconInput Label="自備款金額"
                              IconClass="bi bi-wallet2"
                              @bind-Value="@DownPaymentText"
                              InputType="text"
                              Placeholder="請輸入自備款金額"
                              IsRequired="true"
                              HelpText="新台幣元，支援千分位逗號"
                              ErrorMessage="@GetErrorMessage(nameof(LoanInput.DownPayment))"
                              WarningMessage="@GetWarningMessage(nameof(LoanInput.DownPayment))"
                              InfoMessage="@GetInfoMessage(nameof(LoanInput.DownPayment))" />
                </div>
            </div>

            <!-- 貸款條件智能切換 -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="bi bi-credit-card me-2"></i>貸款條件設定
                        </h6>
                        <div class="btn-group" role="group">
                            <input type="radio" class="btn-check" id="loanRatioMode"
                                   @onchange="@(() => ToggleLoanMode(true))"
                                   checked="@LoanInput.IsLoanRatioMode">
                            <label class="btn btn-outline-primary btn-sm" for="loanRatioMode">
                                貸款成數模式
                            </label>

                            <input type="radio" class="btn-check" id="loanAmountMode"
                                   @onchange="@(() => ToggleLoanMode(false))"
                                   checked="@(!LoanInput.IsLoanRatioMode)">
                            <label class="btn btn-outline-primary btn-sm" for="loanAmountMode">
                                貸款金額模式
                            </label>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        @if (LoanInput.IsLoanRatioMode)
                        {
                            <!-- 貸款成數模式：成數可編輯，金額顯示 -->
                            <div class="col-md-6">
                                <IconInput Label="貸款成數"
                                          IconClass="bi bi-percent"
                                          @bind-Value="@LoanRatioText"
                                          InputType="number"
                                          Step="0.1"
                                          Min="10"
                                          Max="90"
                                          Placeholder="請輸入貸款成數"
                                          HelpText="10% - 90%"
                                          ErrorMessage="@GetErrorMessage(nameof(LoanInput.LoanRatio))"
                                          WarningMessage="@GetWarningMessage(nameof(LoanInput.LoanRatio))" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">
                                        <i class="bi bi-currency-dollar me-2"></i>貸款金額
                                        <small class="text-muted">(自動計算)</small>
                                    </label>
                                    <div class="form-control bg-light border-2 border-info">
                                        <strong class="text-primary">@FormatCurrency(LoanInput.CalculatedLoanAmount)</strong>
                                    </div>
                                    <div class="form-text">根據貸款成數自動計算</div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- 貸款金額模式：金額可編輯，成數顯示 -->
                            <div class="col-md-6">
                                <IconInput Label="貸款金額"
                                          IconClass="bi bi-currency-dollar"
                                          @bind-Value="@LoanAmountText"
                                          InputType="text"
                                          Placeholder="請輸入貸款金額"
                                          HelpText="新台幣元，支援千分位逗號"
                                          ErrorMessage="@GetErrorMessage(nameof(LoanInput.LoanAmount))"
                                          WarningMessage="@GetWarningMessage(nameof(LoanInput.LoanAmount))" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">
                                        <i class="bi bi-percent me-2"></i>貸款成數
                                        <small class="text-muted">(自動計算)</small>
                                    </label>
                                    <div class="form-control bg-light border-2 border-info">
                                        <strong class="text-primary">@($"{LoanInput.CalculatedLoanRatio:F1}%")</strong>
                                    </div>
                                    <div class="form-text">根據貸款金額自動計算</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- 貸款年限 -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <IconInput Label="貸款年限"
                              IconClass="bi bi-clock"
                              @bind-Value="@LoanYearsText"
                              InputType="number"
                              Step="1"
                              Min="1"
                              Max="40"
                              Placeholder="請輸入貸款年限"
                              HelpText="1 - 40年"
                              ErrorMessage="@GetErrorMessage(nameof(LoanInput.LoanYears))"
                              WarningMessage="@GetWarningMessage(nameof(LoanInput.LoanYears))" />
                </div>
            </div>

            <!-- 利率設定智能切換 -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="bi bi-graph-up me-2"></i>利率設定
                        </h6>
                        <div class="btn-group" role="group">
                            <input type="radio" class="btn-check" id="fixedRateMode"
                                   @onchange="@(() => ToggleRateMode(true))"
                                   checked="@LoanInput.IsFixedRateMode">
                            <label class="btn btn-outline-success btn-sm" for="fixedRateMode">
                                固定利率
                            </label>

                            <input type="radio" class="btn-check" id="stageRateMode"
                                   @onchange="@(() => ToggleRateMode(false))"
                                   checked="@(!LoanInput.IsFixedRateMode)">
                            <label class="btn btn-outline-success btn-sm" for="stageRateMode">
                                階段式利率
                            </label>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (LoanInput.IsFixedRateMode)
                    {
                        <!-- 固定利率模式 -->
                        <div class="row">
                            <div class="col-md-6">
                                <IconInput Label="固定年利率"
                                          IconClass="bi bi-percent"
                                          @bind-Value="@FixedRateText"
                                          InputType="number"
                                          Step="0.001"
                                          Min="0.1"
                                          Max="20"
                                          Placeholder="請輸入年利率"
                                          HelpText="0.1% - 20%"
                                          ErrorMessage="@GetErrorMessage(nameof(LoanInput.FixedAnnualRate))"
                                          WarningMessage="@GetWarningMessage(nameof(LoanInput.FixedAnnualRate))" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">
                                        <i class="bi bi-calendar-month me-2"></i>月利率
                                        <small class="text-muted">(自動計算)</small>
                                    </label>
                                    <div class="form-control bg-light border-2 border-success">
                                        <strong class="text-success">@($"{LoanInput.MonthlyFixedRate * 100:F4}%")</strong>
                                    </div>
                                    <div class="form-text">年利率 ÷ 12</div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- 階段式利率模式 -->
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <label class="form-label mb-0">利率階段設定</label>
                                <button type="button" class="btn btn-success btn-sm" @onclick="AddInterestRateStage">
                                    <i class="bi bi-plus-circle me-1"></i>新增階段
                                </button>
                            </div>

                            @for (int i = 0; i < LoanInput.InterestRateStages.Count; i++)
                            {
                                var index = i; // 避免閉包問題
                                var stage = LoanInput.InterestRateStages[index];

                                <div class="card mb-2">
                                    <div class="card-body">
                                        <div class="row align-items-center">
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label class="form-label small">第@(index + 1)階段年利率 (%)</label>
                                                    <input type="number" class="form-control form-control-sm"
                                                           @bind="stage.AnnualRate"
                                                           step="0.001" min="0.1" max="20"
                                                           placeholder="年利率" />
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label class="form-label small">月利率 (自動計算)</label>
                                                    <div class="form-control form-control-sm bg-light">
                                                        @($"{stage.MonthlyRate * 100:F4}%")
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label class="form-label small">階段年限 (年)</label>
                                                    <input type="number" class="form-control form-control-sm"
                                                           @bind="stage.Years"
                                                           step="1" min="1" max="40"
                                                           placeholder="年限" />
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="d-flex justify-content-end">
                                                    @if (LoanInput.InterestRateStages.Count > 1)
                                                    {
                                                        <button type="button" class="btn btn-danger btn-sm"
                                                                @onclick="@(() => RemoveInterestRateStage(index))">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="alert alert-info">
                                <small>
                                    <i class="bi bi-info-circle me-1"></i>
                                    階段年限總和：@GetTotalStageYears() 年 / 貸款年限：@LoanInput.LoanYears 年
                                    @if (GetTotalStageYears() != LoanInput.LoanYears)
                                    {
                                        <span class="text-danger">（不匹配）</span>
                                    }
                                    else
                                    {
                                        <span class="text-success">（匹配）</span>
                                    }
                                </small>
                            </div>

                            @if (!string.IsNullOrEmpty(GetErrorMessage("stages")))
                            {
                                <div class="alert alert-danger">@GetErrorMessage("stages")</div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- 寬限期設定智能切換 -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="bi bi-hourglass-split me-2"></i>寬限期設定
                        </h6>
                        <div class="btn-group" role="group">
                            <input type="radio" class="btn-check" id="noGracePeriodMode"
                                   @onchange="@(() => ToggleGracePeriodMode(true))"
                                   checked="@LoanInput.IsNoGracePeriodMode">
                            <label class="btn btn-outline-warning btn-sm" for="noGracePeriodMode">
                                無寬限期
                            </label>

                            <input type="radio" class="btn-check" id="gracePeriodMode"
                                   @onchange="@(() => ToggleGracePeriodMode(false))"
                                   checked="@(!LoanInput.IsNoGracePeriodMode)">
                            <label class="btn btn-outline-warning btn-sm" for="gracePeriodMode">
                                有寬限期
                            </label>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (LoanInput.IsNoGracePeriodMode)
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle me-2"></i>
                            直接進入正常還款期，從第一個月開始本息攤還
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <IconInput Label="寬限期年限"
                                          IconClass="bi bi-clock-history"
                                          @bind-Value="@GracePeriodYearsText"
                                          InputType="number"
                                          Step="1"
                                          Min="1"
                                          Max="5"
                                          Placeholder="請輸入寬限期年限"
                                          HelpText="1 - 5年，寬限期內僅支付利息"
                                          ErrorMessage="@GetErrorMessage(nameof(LoanInput.GracePeriodYears))"
                                          WarningMessage="@GetWarningMessage(nameof(LoanInput.GracePeriodYears))" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">
                                        <i class="bi bi-gear me-2"></i>寬限期計算方式
                                    </label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio"
                                               id="gracePeriodIncluded"
                                               @onchange="@(() => LoanInput.IsGracePeriodIncluded = true)"
                                               checked="@LoanInput.IsGracePeriodIncluded">
                                        <label class="form-check-label" for="gracePeriodIncluded">
                                            包含在貸款年限內
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio"
                                               id="gracePeriodNotIncluded"
                                               @onchange="@(() => LoanInput.IsGracePeriodIncluded = false)"
                                               checked="@(!LoanInput.IsGracePeriodIncluded)">
                                        <label class="form-check-label" for="gracePeriodNotIncluded">
                                            不包含在貸款年限內
                                        </label>
                                    </div>
                                    <div class="form-text">
                                        @if (LoanInput.IsGracePeriodIncluded)
                                        {
                                            <span>實際還款期間：@((LoanInput.LoanYears - LoanInput.GracePeriodYears))年</span>
                                        }
                                        else
                                        {
                                            <span>總還款期間：@((LoanInput.LoanYears + LoanInput.GracePeriodYears))年</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- 其他費用 -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h6 class="mb-0">
                        <i class="bi bi-receipt me-2"></i>其他費用
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <IconInput Label="雜支費用"
                                      IconClass="bi bi-file-text"
                                      @bind-Value="@MiscellaneousFeesText"
                                      InputType="text"
                                      Placeholder="代書費、規費等"
                                      HelpText="如代書費、規費等，新台幣元"
                                      ErrorMessage="@GetErrorMessage(nameof(LoanInput.MiscellaneousFees))"
                                      WarningMessage="@GetWarningMessage(nameof(LoanInput.MiscellaneousFees))" />
                        </div>
                        <div class="col-md-6">
                            <IconInput Label="裝潢費用"
                                      IconClass="bi bi-palette"
                                      @bind-Value="@RenovationFeesText"
                                      InputType="text"
                                      Placeholder="額外裝修預算"
                                      HelpText="額外裝修預算，新台幣元"
                                      ErrorMessage="@GetErrorMessage(nameof(LoanInput.RenovationFees))"
                                      WarningMessage="@GetWarningMessage(nameof(LoanInput.RenovationFees))" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- 還款方式 -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h6 class="mb-0">
                        <i class="bi bi-arrow-repeat me-2"></i>還款方式
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio"
                                       id="equalInstallment"
                                       @onchange="@(() => LoanInput.PaymentMethod = PaymentMethod.EqualInstallment)"
                                       checked="@(LoanInput.PaymentMethod == PaymentMethod.EqualInstallment)">
                                <label class="form-check-label" for="equalInstallment">
                                    <strong>本息攤還</strong>
                                    <div class="text-muted small">每月固定金額還款</div>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio"
                                       id="equalPrincipal"
                                       @onchange="@(() => LoanInput.PaymentMethod = PaymentMethod.EqualPrincipal)"
                                       checked="@(LoanInput.PaymentMethod == PaymentMethod.EqualPrincipal)">
                                <label class="form-check-label" for="equalPrincipal">
                                    <strong>本金攤還</strong>
                                    <div class="text-muted small">每月本金固定，利息遞減</div>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 提交按鈕 -->
                <div class="text-center mt-4">
                    <button type="button" class="btn btn-primary btn-lg px-5" @onclick="HandleValidSubmit" disabled="@IsCalculating">
                        @if (IsCalculating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>計算中...</span>
                        }
                        else
                        {
                            <i class="bi bi-calculator me-2"></i>
                            <span>開始試算</span>
                        }
                    </button>
                </div>        </EditForm>
    </div>
</div>

@code {
    [Parameter] public LoanCalculationInput LoanInput { get; set; } = new();
    [Parameter] public EventCallback<LoanCalculationInput> OnCalculate { get; set; }

    private ValidationResult? _validationResult;
    private bool IsCalculating = false;

    // 文字輸入綁定屬性
    private string HousePriceText
    {
        get => FormatCurrency(LoanInput.HousePrice);
        set => LoanInput.HousePrice = ParseCurrency(value);
    }

    private string DownPaymentText
    {
        get => FormatCurrency(LoanInput.DownPayment);
        set => LoanInput.DownPayment = ParseCurrency(value);
    }

    private string LoanRatioText
    {
        get => LoanInput.LoanRatio.ToString("F1");
        set => LoanInput.LoanRatio = ParseDecimal(value);
    }

    private string LoanAmountText
    {
        get => FormatCurrency(LoanInput.LoanAmount);
        set => LoanInput.LoanAmount = ParseCurrency(value);
    }

    private string LoanYearsText
    {
        get => LoanInput.LoanYears.ToString();
        set => LoanInput.LoanYears = ParseInt(value);
    }

    private string FixedRateText
    {
        get => LoanInput.FixedAnnualRate.ToString("F3");
        set => LoanInput.FixedAnnualRate = ParseDecimal(value);
    }

    private string GracePeriodYearsText
    {
        get => LoanInput.GracePeriodYears.ToString();
        set => LoanInput.GracePeriodYears = ParseInt(value);
    }

    private string MiscellaneousFeesText
    {
        get => FormatCurrency(LoanInput.MiscellaneousFees);
        set => LoanInput.MiscellaneousFees = ParseCurrency(value);
    }

    private string RenovationFeesText
    {
        get => FormatCurrency(LoanInput.RenovationFees);
        set => LoanInput.RenovationFees = ParseCurrency(value);
    }

    protected override void OnInitialized()
    {
        // 初始化利率階段
        if (!LoanInput.InterestRateStages.Any())
        {
            LoanInput.InterestRateStages.Add(new InterestRateStage
            {
                AnnualRate = 2.5m,
                Years = LoanInput.LoanYears
            });
        }

        ValidateInput();
    }

    private void ToggleLoanMode(bool isLoanRatioMode)
    {
        LoanInput.IsLoanRatioMode = isLoanRatioMode;
        ValidateInput();
        StateHasChanged();
    }

    private void ToggleRateMode(bool isFixedRateMode)
    {
        LoanInput.IsFixedRateMode = isFixedRateMode;

        // 初始化階段式利率
        if (!isFixedRateMode && !LoanInput.InterestRateStages.Any())
        {
            LoanInput.InterestRateStages.Add(new InterestRateStage
            {
                AnnualRate = LoanInput.FixedAnnualRate,
                Years = LoanInput.LoanYears
            });
        }

        ValidateInput();
        StateHasChanged();
    }

    private void ToggleGracePeriodMode(bool isNoGracePeriodMode)
    {
        LoanInput.IsNoGracePeriodMode = isNoGracePeriodMode;
        ValidateInput();
        StateHasChanged();
    }

    private void AddInterestRateStage()
    {
        if (LoanInput.InterestRateStages.Count < 10)
        {
            LoanInput.InterestRateStages.Add(new InterestRateStage
            {
                AnnualRate = 2.5m,
                Years = 1
            });
            ValidateInput();
            StateHasChanged();
        }
    }

    private void RemoveInterestRateStage(int index)
    {
        if (LoanInput.InterestRateStages.Count > 1 && index >= 0 && index < LoanInput.InterestRateStages.Count)
        {
            LoanInput.InterestRateStages.RemoveAt(index);
            ValidateInput();
            StateHasChanged();
        }
    }

    private int GetTotalStageYears()
    {
        return LoanInput.InterestRateStages.Sum(s => s.Years);
    }

    private async Task HandleValidSubmit()
    {
        IsCalculating = true;
        StateHasChanged();

        try
        {
            ValidateInput();

            if (_validationResult?.IsValid == true)
            {
                await OnCalculate.InvokeAsync(LoanInput);
            }
        }
        finally
        {
            IsCalculating = false;
            StateHasChanged();
        }
    }

    private void ValidateInput()
    {
        _validationResult = ValidationService.ValidateInput(LoanInput);
    }

    private string GetErrorMessage(string propertyName)
    {
        return _validationResult?.Errors.FirstOrDefault(e => e.PropertyName == propertyName)?.ErrorMessage ?? string.Empty;
    }

    private string GetWarningMessage(string propertyName)
    {
        return _validationResult?.Warnings.FirstOrDefault(w => w.PropertyName == propertyName)?.WarningMessage ?? string.Empty;
    }

    private string GetInfoMessage(string propertyName)
    {
        return _validationResult?.Infos.FirstOrDefault(i => i.PropertyName == propertyName)?.InfoMessage ?? string.Empty;
    }

    private string FormatCurrency(decimal value)
    {
        return value == 0 ? string.Empty : value.ToString("N0");
    }

    private decimal ParseCurrency(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return 0;

        // 移除千分位逗號和空格
        var cleanValue = value.Replace(",", "").Replace(" ", "");

        if (decimal.TryParse(cleanValue, out var result))
            return result;

        return 0;
    }

    private decimal ParseDecimal(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return 0;

        if (decimal.TryParse(value, out var result))
            return result;

        return 0;
    }

    private int ParseInt(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return 0;

        if (int.TryParse(value, out var result))
            return result;

        return 0;
    }
}
